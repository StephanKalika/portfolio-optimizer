version: '3.8'

services:
  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=stockuser
      - POSTGRES_PASSWORD=stockpassword
      - POSTGRES_DB=stockdata
    ports:
      - "5432:5432" # Expose PostgreSQL port to host for easier inspection if needed
    networks:
      - portfolio_network

  data_ingestion_service:
    build: ./data_ingestion_service
    ports:
      - "5001:5001"
    volumes:
      - ./data_ingestion_service:/app
    environment:
      - DATABASE_URL=postgresql://stockuser:stockpassword@db:5432/stockdata
      - FMP_API_KEY=dqWvi9d10HNxfG275sdqprlejmbujHFR
      - FLASK_APP=app.py
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5001
    depends_on:
      - db
    networks:
      - portfolio_network

  model_training_service:
    build: ./model_training_service
    ports:
      - "5002:8000"
    volumes:
      - trained_models_data:/app/trained_models
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://stockuser:stockpassword@db:5432/stockdata
    depends_on:
      - db
    networks:
      - portfolio_network

  # Model Training Worker - processes tasks from RabbitMQ
  model_training_worker:
    build: ./model_training_service
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_MODE=worker
      - MODEL_TRAINING_SERVICE_URL=http://model_training_service:8000
      - RABBITMQ_HOST=rabbitmq
      - DATABASE_URL=postgresql://stockuser:stockpassword@db:5432/stockdata
    volumes:
      - trained_models_data:/app/trained_models
      - ./shared_modules:/app/shared_modules
    depends_on:
      - db
      - rabbitmq
      - model_training_service
    networks:
      - portfolio_network

  portfolio_optimization_service:
    build: ./portfolio_optimization_service
    ports:
      - "5003:8001"
    volumes:
      - ./portfolio_optimization_service:/app
    environment:
      - DATABASE_URL=postgresql://stockuser:stockpassword@db:5432/stockdata
      - MODEL_TRAINING_SERVICE_URL=http://model_training_service:8000
    depends_on:
      - db
      - model_training_service
    networks:
      - portfolio_network

  api_gateway_service:
    build: ./api_gateway_service
    ports:
      - "8000:5000"
    volumes:
      - ./api_gateway_service:/app
      - ./shared_modules:/app/shared_modules
    environment:
      - DATA_INGESTION_SERVICE_URL=http://data_ingestion_service:5001
      - MODEL_TRAINING_SERVICE_URL=http://model_training_service:8000
      - PORTFOLIO_OPTIMIZATION_SERVICE_URL=http://portfolio_optimization_service:8001
    depends_on:
      data_ingestion_service:
        condition: service_started
      model_training_service:
        condition: service_started
      portfolio_optimization_service:
        condition: service_started
    networks:
      - portfolio_network

  frontend_service:
    build: ./frontend_service
    ports:
      - "8501:8501"
    volumes:
      - ./frontend_service:/app
    environment:
      - API_GATEWAY_URL=http://api_gateway_service:5000 # Internal URL for API gateway
    depends_on:
      api_gateway_service:
        condition: service_started
    networks:
      - portfolio_network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - portfolio_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - portfolio_network
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - portfolio_network

  # Message Queue Service - RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - portfolio_network

networks:
  portfolio_network:
    driver: bridge

volumes:
  postgres_data: # Defines the named volume for data persistence
  trained_models_data: {} # Defines the named volume for trained models
  prometheus_data: {} # Defines the named volume for Prometheus data
  db_data:
  pgadmin_data:
  rabbitmq_data: 